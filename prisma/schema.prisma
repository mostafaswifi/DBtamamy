generator client {
  provider = "prisma-client-js"
  
  // Enable if using PostgreSQL extensions (like PostGIS)
  // previewFeatures = ["postgresqlExtensions"] 
}

datasource db {
  // provider = "postgesql" // or "sqlite" if using SQLite
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Employee {
  id             Int                    @id @default(autoincrement())
  employeeName   String
  employeeCode   String                 @unique
  hireDate       DateTime?
  department     String?
  jobTitle       String?
  attendanceDepartures AttendanceDeparture[]
  places         Place[]                @relation("EmployeePlaces")
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt

  @@map("employees")
}

model AttendanceDeparture {
  id               Int       @id @default(autoincrement())
  employee         Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId       Int
  attendanceTime   DateTime?
  departureTime    DateTime?
  attendanceStatus String?
  departureStatus  String?
  notes            String?
  cordx            Float?
  cordy            Float?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@map("attendance_departures")
}

model Place {
  id        Int       @id @default(autoincrement())
  name      String
  points    Point[]   @relation("PlacePoints")
  employees Employee[] @relation("EmployeePlaces")

  @@map("places")
}

model Point {
  id      Int     @id @default(autoincrement())
  place   Place   @relation("PlacePoints", fields: [placeId], references: [id])
  placeId Int
  cordx   Float
  cordy   Float

  @@map("points")
}